apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'jetty'

import groovy.sql.Sql

repositories {
  mavenCentral()
}

configurations {
    driver
}
dependencies {
  driver group: 'mysql', name: 'mysql-connector-java', version: '5.1.36'

  providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
  runtime 'javax.servlet.jsp.jstl:javax.servlet.jsp.jstl-api:1.2.1'
  
  testCompile "junit:junit:4.12"  
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each {File file ->
  loader.addURL(file.toURL())
}

def dbProps = [user: 'user', password: 'password', allowMultiQueries: 'true'] as Properties
def dbUrl = 'jdbc:mysql://localhost:3306'
def dbDriver = 'com.mysql.jdbc.Driver'

////////
// Create the database; assumes (deliberately) the database does not exist
// Does not try to do any kind of db migration
//
task createDB << {
  Sql.withInstance(dbUrl, dbProps, dbDriver) { sql ->
    sql.execute 'CREATE DATABASE alm;'

    sql.execute 'USE alm;'

    sql.execute '''
CREATE TABLE alm_users (
  id INT PRIMARY KEY AUTO_INCREMENT,
  username VARCHAR(20),
  password VARCHAR(20)
);
'''

    sql.execute '''
CREATE TABLE fares (
  id INT PRIMARY KEY AUTO_INCREMENT,
  emp_id INT,
  pickup VARCHAR(50) COMMENT 'Street address',
  dropoff VARCHAR(50) COMMENT 'Street address',
  start DATETIME,
  end DATETIME,
  fare_charge INT COMMENT 'USD in pennies',
  driver_fee INT COMMENT 'USD in pennies',
  passenger_rating TINYINT UNSIGNED COMMENT 'From 0 to 5',
  driver_rating TINYINT UNSIGNED COMMENT 'From 0 to 5',
  FOREIGN KEY (emp_id) references alm_users(id)
);
'''
  }
}

////////
// Seed the database with a set of sample data, including users
//
task seedDB << {
  Sql.withInstance(dbUrl, dbProps, dbDriver) { sql ->
    sql.execute 'USE alm';
    
    // Populate with a few users
    def insertSql = "INSERT INTO alm_users (username, password) VALUES (?,?)"
    sql.executeInsert insertSql, ['fred', 'fredpassword']
    sql.executeInsert insertSql, ['barney', 'barneypassword']
    sql.executeInsert insertSql, ['wilma', 'wilmapassword']
    sql.executeInsert insertSql, ['betty', 'bettypassword']
    
    // Verify they got added
    sql.eachRow('SELECT username, password FROM alm_users') { row ->
      println("    Found ${row.id}: ${row.username} / ${row.password}")
    }
  }
}

////////
// Add some randomly-generated data to make it look like an employee
// has just handled a new fare
//
task addFares << {
  Sql.withInstance(dbUrl, dbProps, dbDriver) { sql ->
    sql.execute 'USE alm';
  }
}

////////
// Drop the database; typically used as the predecessor to createDB,
// as a cheap (and destructive!) way of doing db migrations
//
task dropDB << {
  Sql.withInstance(dbUrl, dbProps, dbDriver) { sql ->
    sql.execute '''
DROP DATABASE alm;
'''
  }
}

war {
  webInf { from 'src/main/webap/WEB-INF' }
}

////////
// Destructive way of ensuring that Tomcat has a good user cred set
// for the Manager GUI for easier admin of Tomcat in an Azure VM
// instance
//
String tomcatDir = '/usr/local/Cellar/tomcat/8.0.26/libexec/'
task setUpTomcatConf(type: Copy) << {
	println "==> Setting up tomcat conf/tomcat-users.xml:"
  
  // Copy src/tomcat-conf/tomcat-users.xml to destination
  from 'src/tomcat-conf/tomcat-users.xml'
  into tomcatDir + 'conf'
  
  println file(tomcatDir + '/conf/tomcat-users.xml').text
}



